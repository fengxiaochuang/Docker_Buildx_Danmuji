# 利用GitHub Action自动构建多框架的docker镜像
name: Buildx_Danmuji_Docker

on:
  # main分支的push操作会触发当前脚本的执行
#  push:
#    branches: [ main ]
  # main分支的pr操作会触发当前脚本的执行
#  pull_request:
#    branches: [ main ]
  # 定时任务,分时日月年,为国际标准时间16点,对应中国时间0点
  schedule:
    - cron: '0 16 * * *'
  # 点击star时开始任务
  watch:
    types: started


jobs:
  Buildx_Danmuji_Docker:
    # 运行在Ubuntu系统上
    runs-on: ubuntu-latest
    # 步骤
    steps:
      - name: Prepare
        id: prepare
        # IMAGE_NAME ： 镜像名称
        # ALI_ADD ：阿里镜像地址
        # GITHUB_VERSION ： 源码版本
        # DOCKERHUB_VERSION ： DockerHub 镜像版本
        # TAG_VERSION ： 标签版本 zzcabc/pixivbiu-test:2.2.0a
        # TAG_LATEST ： 最新版本 zzcabc/pixivbiu-test:latest
        # ALI_VERSION ：
        # ALI_LATEST :
        run: |
          IMAGE_NAME=danmuji
          ALI_ADD=registry.cn-hangzhou.aliyuncs.com
          GITHUB_VERSION=$(curl -sX GET "https://api.github.com/repos/BanqiJane/Bilibili_Danmuji/releases/latest" | awk '/tag_name/{print $4;exit}' FS='[""]')
          DOCKERHUB_VERSION=$(curl -sX GET "https://hub.docker.com/v2/repositories/zzcabc/danmuji/tags" | awk '{print $610;exit}' FS='[""]')
          TAG_VERSION="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${GITHUB_VERSION}"
          TAG_LATEST="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:latest"
          ALI_VERSION="${ALI_ADD}/${{ secrets.ALIYUN_NAMESPACES }}/${IMAGE_NAME}:${GITHUB_VERSION}"
          ALI_LATEST="${ALI_ADD}/${{ secrets.ALIYUN_NAMESPACES }}/${IMAGE_NAME}:latest"
          echo ::set-output name=github_version::${GITHUB_VERSION}
          echo ::set-output name=dockerhub_version::${DOCKERHUB_VERSION}
          echo ::set-output name=tag_version::${TAG_VERSION}
          echo ::set-output name=tag_latest::${TAG_LATEST}
          echo ::set-output name=ali_version::${ALI_VERSION}
          echo ::set-output name=ali_latest::${ALI_LATEST}
      # 切换到主分支
      - name: Checkout
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: actions/checkout@main

      - name: Set up QEMU
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }} 
        uses: docker/setup-qemu-action@v1

      # 初始化Docker Buildx
      - name: Set up Docker Buildx
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: docker/setup-buildx-action@v1

      # 登录到DockerHub
      - name: Login to DockerHub
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 登录到阿里镜像仓库
      - name: Login To Alibaba Cloud Container Registry
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        run: |
          docker login -u ${{ secrets.ALIYUN_USERNAME }} -p ${{ secrets.ALIYUN_PWD }} registry.cn-hangzhou.aliyuncs.com

      # 初始化 JDK8 环境
      - name: Set up JDK 8
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      # 使用Gradle编译构建同时命名danmuji.jar
      - name: Build with Gradle
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        run: |
          sudo apt-get install -y git
          git clone https://github.com/BanqiJane/Bilibili_Danmuji.git
          cd Bilibili_Danmuji
          sudo chmod +x ./gradlew
          sudo ./gradlew build -x test
          sudo mv $(find build -type f -size +10M) ././danmuji.jar

      # 构建并推送
      - name: Build and Push
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: docker/build-push-action@v2
        with:
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
          file: ./Dockerfile.Alpine
          context: .
          push: true
          tags: |
            ${{ steps.prepare.outputs.tag_version }}
            ${{ steps.prepare.outputs.tag_latest }}
            ${{ steps.prepare.outputs.ali_version }}
            ${{ steps.prepare.outputs.ali_latest }}